source('~/Documents/GitHub/Covid-Model/SimpifiedMiller_SecondWave.R', echo=TRUE)
debugSource('~/Documents/GitHub/Covid-Model/SimpifiedMiller_SecondWave.R', echo=TRUE)
source('~/Documents/GitHub/Covid-Model/SimpifiedMiller_SecondWave.R', echo=TRUE)
# this is the R package to solve the system of ODEs
require(deSolve)
# need to invert matrices
require(matlib)
library(data.table)
library(curl)
# Contact Tracing parameter (Placeholder value)
phi <- 1
#Prob. going from Q to S (Placeholder value)
pi_S <- 1
#Prob. going from Q to RS (Placeholder value)
pi_RS <- 1
#Prob. going from Q to RA (Placeholder value)
pi_RA <- 1
#decrease in asymptomatic infectivity
bA <- 0.5
#decrease in Clinical infectivity
bC <- 0.1
#mean time spent in Exposed
deltaE <- 1/4
#mean time spent in Infected_Pre-Clinical
deltaP <- 1/2.4
#mean time spent in Infected_Clinical
deltaC <- 1/3.2
#mean time spent in Infected_Asymptomatic
deltaA <- 1/7
#mean time spent in Q (Placeholder value)
deltaQ <- 1/2
# Rate of quarantine due to contact tracing
lambda = 1/5
# R0 after re-escalation
R0c <- 0.5
# Added importations since initial conditions of one exposed gives
# very slow initial growth of the outbreak.
tau <- 50/519705
#hospitalization given clinical infection
r <- 0.85
#asymptomatic rate
ri <- 0.1
#hospitalization rates for symptomatic cases
h_r = 0.1
#ICU rates given hospitalization
i_r = 0.1
# Vectorize and convert to fractions (Not sure what of this is still needed)
age.frac = 1
tot.popn = 100000
# Added importations since initial conditions of one exposed gives
# very slow initial growth of the outbreak.
tau <- 50/519705
#hospitalization given clinical infection
r <- 0.85
#asymptomatic rate
ri <- 0.1
#hospitalization rates for symptomatic cases
h_r = 0.1
#ICU rates given hospitalization
i_r = 0.1
# Vectorize and convert to fractions (Not sure what of this is still needed)
age.frac = 1
tot.popn = 100000
age.frac = age.frac/tot.popn
av.hosp <- 0.1
av.ICU <-  0.05
# Given a user supplied R0, calculate the beta
find.beta = function(beta,R0){
# Calculate R0 using the next-generation approach of van den Driesshe and
# Watmough 2002.
F <- matrix(rep(0,16), nrow =4, ncol = 4)
V <- F
F[1,] <- c(0, beta, beta*bC, beta*bA)
V[1,1] <- deltaE + lambda
V[2,1] <- -r*deltaE
V[2,2] <- deltaP + lambda
V[3,2] <- -deltaP
V[3,3] <- deltaC + lambda
V[4,1] <- -(1-r)*deltaE
V[4,4] <- deltaA + lambda
inv.V = inv(V)
K = F%*%inv.V
R0.calc = max(abs(eigen(K)$values))
R0 - R0.calc
}
betac <- uniroot(find.beta,c(0,10),R0=R0c)$root
print(betac)
# This is a function describing importations. This states that the importation
# rate is turned off on day 5. Without this forcing the epidemic begins too slowly.
tau.fun = function(t){
if(t>=5){
tauval <- 0
} else{
tauval <- tau}
return(tauval)
}
# In NL, once stay-at-home orders were issued the outbreak was brought under
# control. Therefore, the transmission rate, beta, is assumed to have a breakpoint
# around t = SDstart which is a time at which stay-at-home orders are issued.
beta.fun = function(t){
if(t>=SDstart){
betaval <- betac
} else{
betaval <- beta}
return(betaval)
}
Miller.CT = function(t,y,parms){
S <- y[1]
E <- y[2]
IP <- y[3]
IC <- y[4]
IA <- y[5]
RS <- y[6]
RA <- y[7]
Q <- y[8]
dS = -S*beta.fun(t)*(IP+bC*IC+bA*IA+phi*Q)/N + pi_S*deltaQ*Q
dE = [tau.fun(t) - lambda*E] + S*beta.fun(t)*(IP+bC*IC+bA*IA)/N-deltaE*E
dIP = r*deltaE*E-deltaP*IP - lambda*IP + pi_IP*deltaQ*Q
dIC = deltaP*IP-deltaC*IC - lambda*IC
## Not sure if its possible to still have COVID after 14days if asymptomatic
dIA = (1-r)*deltaE*E - deltaA*IA - lambda*IA + pi_IA*deltaQ*Q
dRS = deltaC*IC - r*lambda*E + lambda*IP + lambda*IC
dRA = deltaA*IA - (1-r)*lambda*E + lambda*IA + pi_RA*deltaQ*Q
dQ = S*beta.fun(t)*(phi*Q)/N - deltaQ*Q
# cumulative clinical cases
dcumIC = deltaP*IP
return(list(c(dS,dE,dIP,dIC,dIA,dRS,dRA,dcumIC)))
}
# Assumed the epidemic begins with 3 exponsed.
E0 = 3/tot.popn
dS = -S*beta.fun(t)*(IP+bC*IC+bA*IA+phi*Q)/N + pi_S*deltaQ*Q
dS = -S*beta.fun(t)*(IP+bC*IC+bA*IA+phi*Q)/N + pi_S*deltaQ*Q
Miller.CT = function(t,y,parms){
S <- y[1]
E <- y[2]
IP <- y[3]
IC <- y[4]
IA <- y[5]
RS <- y[6]
RA <- y[7]
Q <- y[8]
dS = -S*beta.fun(t)*(IP+bC*IC+bA*IA+phi*Q)/N + pi_S*deltaQ*Q
dE = [tau.fun(t) - lambda*E] + S*beta.fun(t)*(IP+bC*IC+bA*IA)/N-deltaE*E
dIP = r*deltaE*E-deltaP*IP - lambda*IP + pi_IP*deltaQ*Q
dIC = deltaP*IP-deltaC*IC - lambda*IC
## Not sure if its possible to still have COVID after 14days if asymptomatic
dIA = (1-r)*deltaE*E - deltaA*IA - lambda*IA + pi_IA*deltaQ*Q
dRS = deltaC*IC - r*lambda*E + lambda*IP + lambda*IC
dRA = deltaA*IA - (1-r)*lambda*E + lambda*IA + pi_RA*deltaQ*Q
dQ = S*beta.fun(t)*(phi*Q)/N - deltaQ*Q
# cumulative clinical cases
dcumIC = deltaP*IP
return(list(c(dS,dE,dIP,dIC,dIA,dRS,dRA,dcumIC)))
}
Miller.CT = function(t,y,parms){
S <- y[1]
E <- y[2]
IP <- y[3]
IC <- y[4]
IA <- y[5]
RS <- y[6]
RA <- y[7]
Q <- y[8]
dS = -S*beta.fun(t)*(IP+bC*IC+bA*IA+phi*Q)/N + pi_S*deltaQ*Q
dE = [tau.fun(t) - lambda*E] + S*beta.fun(t)*(IP+bC*IC+bA*IA)/N-deltaE*E
dIP = r*deltaE*E-deltaP*IP - lambda*IP + pi_IP*deltaQ*Q
dIC = deltaP*IP-deltaC*IC - lambda*IC
## Not sure if its possible to still have COVID after 14days if asymptomatic
dIA = (1-r)*deltaE*E - deltaA*IA - lambda*IA + pi_IA*deltaQ*Q
dRS = deltaC*IC - r*lambda*E + lambda*IP + lambda*IC
dRA = deltaA*IA - (1-r)*lambda*E + lambda*IA + pi_RA*deltaQ*Q
dQ = S*beta.fun(t)*(phi*Q)/N - deltaQ*Q
# cumulative clinical cases
dcumIC = deltaP*IP
return(list(c(dS,dE,dIP,dIC,dIA,dRS,dRA,dcumIC)))
}
